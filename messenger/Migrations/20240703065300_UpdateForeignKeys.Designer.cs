// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using messenger;

#nullable disable

namespace messenger.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240703065300_UpdateForeignKeys")]
    partial class UpdateForeignKeys
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.5.24306.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Account.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("accountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isOnline")
                        .HasColumnType("bit");

                    b.Property<DateTime>("lastSeen")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AccountChannel", b =>
                {
                    b.Property<int>("ChannelsID")
                        .HasColumnType("int");

                    b.Property<int>("membersID")
                        .HasColumnType("int");

                    b.HasKey("ChannelsID", "membersID");

                    b.HasIndex("membersID");

                    b.ToTable("AccountChannel");
                });

            modelBuilder.Entity("AccountChannel.AccountChannel", b =>
                {
                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("ChannelID")
                        .HasColumnType("int");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID", "ChannelID");

                    b.HasIndex("ChannelID");

                    b.ToTable("AccountChannels");
                });

            modelBuilder.Entity("AccountContact.AccountContact", b =>
                {
                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<bool>("closeFriend")
                        .HasColumnType("bit");

                    b.HasKey("AccountID", "ContactID");

                    b.HasIndex("ContactID");

                    b.ToTable("AccountContacts");
                });

            modelBuilder.Entity("AccountGroup", b =>
                {
                    b.Property<int>("GroupsID")
                        .HasColumnType("int");

                    b.Property<int>("membersID")
                        .HasColumnType("int");

                    b.HasKey("GroupsID", "membersID");

                    b.HasIndex("membersID");

                    b.ToTable("AccountGroup");
                });

            modelBuilder.Entity("AccountGroup.AccountGroup", b =>
                {
                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID", "GroupID");

                    b.HasIndex("GroupID");

                    b.ToTable("AccountGroups");
                });

            modelBuilder.Entity("AccountPV.AccountPV", b =>
                {
                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("PVID")
                        .HasColumnType("int");

                    b.Property<int>("partnerID")
                        .HasColumnType("int");

                    b.HasKey("AccountID", "PVID");

                    b.HasIndex("PVID");

                    b.ToTable("AccountPVs");
                });

            modelBuilder.Entity("Channel.Channel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("channelID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("messagesNumber")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("ChannelAccountMessage.ChannelAccountMessage", b =>
                {
                    b.Property<int>("ChannelID")
                        .HasColumnType("int");

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("MessageID")
                        .HasColumnType("int");

                    b.Property<bool>("isRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("receiveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("seenTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ChannelID", "AccountID", "MessageID");

                    b.HasIndex("AccountID");

                    b.HasIndex("MessageID");

                    b.ToTable("ChannelAccountMessages");
                });

            modelBuilder.Entity("ChannelMessage.ChannelMessage", b =>
                {
                    b.Property<int>("ChannelID")
                        .HasColumnType("int");

                    b.Property<int>("MessageID")
                        .HasColumnType("int");

                    b.HasKey("ChannelID", "MessageID");

                    b.HasIndex("MessageID");

                    b.ToTable("ChannelMessages");
                });

            modelBuilder.Entity("Group.Group", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("GroupID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("messagesNumber")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("GroupAccountMessage.GroupAccountMessage", b =>
                {
                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("MessageID")
                        .HasColumnType("int");

                    b.Property<bool>("isRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("receiveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("seenTime")
                        .HasColumnType("datetime2");

                    b.HasKey("GroupID", "AccountID", "MessageID");

                    b.HasIndex("AccountID");

                    b.HasIndex("MessageID");

                    b.ToTable("GroupAccountMessages");
                });

            modelBuilder.Entity("GroupMessage.GroupMessage", b =>
                {
                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("MessageID")
                        .HasColumnType("int");

                    b.HasKey("GroupID", "MessageID");

                    b.HasIndex("MessageID");

                    b.ToTable("GroupMessages");
                });

            modelBuilder.Entity("Message.Message", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ChannelID")
                        .HasColumnType("int");

                    b.Property<int?>("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("ReplyOF")
                        .HasColumnType("int");

                    b.Property<bool>("isUpdated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("sendDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("senderID")
                        .HasColumnType("int");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ChannelID");

                    b.HasIndex("GroupID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Notification.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("ChatID")
                        .HasColumnType("int");

                    b.Property<string>("ChatType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("receiveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("sendTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("PV.PV", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("messagesNumber")
                        .HasColumnType("int");

                    b.Property<int>("personOneID")
                        .HasColumnType("int");

                    b.Property<int>("personTwoID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("PVs");
                });

            modelBuilder.Entity("PVAccountMessage.PVAccountMessage", b =>
                {
                    b.Property<int>("PVID")
                        .HasColumnType("int");

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("MessageID")
                        .HasColumnType("int");

                    b.Property<bool>("isRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("receiveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("seenTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PVID", "AccountID", "MessageID");

                    b.HasIndex("AccountID");

                    b.HasIndex("MessageID");

                    b.ToTable("PVAccountMessages");
                });

            modelBuilder.Entity("User.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("messenger.PVMessage.PVMessage", b =>
                {
                    b.Property<int>("PVID")
                        .HasColumnType("int");

                    b.Property<int>("MessageID")
                        .HasColumnType("int");

                    b.HasKey("PVID", "MessageID");

                    b.HasIndex("MessageID");

                    b.ToTable("PVMessages");
                });

            modelBuilder.Entity("AccountChannel", b =>
                {
                    b.HasOne("Channel.Channel", null)
                        .WithMany()
                        .HasForeignKey("ChannelsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Account.Account", null)
                        .WithMany()
                        .HasForeignKey("membersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountChannel.AccountChannel", b =>
                {
                    b.HasOne("Account.Account", "Account")
                        .WithMany("AccountChannels")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Channel.Channel", "Channel")
                        .WithMany("AccountChannels")
                        .HasForeignKey("ChannelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("AccountContact.AccountContact", b =>
                {
                    b.HasOne("Account.Account", "Account")
                        .WithMany("Contacts")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Account.Account", "Contact")
                        .WithMany("ContactedBy")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("AccountGroup", b =>
                {
                    b.HasOne("Group.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Account.Account", null)
                        .WithMany()
                        .HasForeignKey("membersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountGroup.AccountGroup", b =>
                {
                    b.HasOne("Account.Account", "Account")
                        .WithMany("AccountGroups")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group.Group", "Group")
                        .WithMany("AccountGroups")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AccountPV.AccountPV", b =>
                {
                    b.HasOne("Account.Account", "Account")
                        .WithMany("AccountPvs")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PV.PV", "Pv")
                        .WithMany("AccountPvs")
                        .HasForeignKey("PVID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Pv");
                });

            modelBuilder.Entity("ChannelAccountMessage.ChannelAccountMessage", b =>
                {
                    b.HasOne("Account.Account", "Account")
                        .WithMany("ChannelAccountMessages")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Channel.Channel", "Channel")
                        .WithMany("ChannelAccountMessages")
                        .HasForeignKey("ChannelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Message.Message", "Message")
                        .WithMany("ChannelAccountMessages")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Channel");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("ChannelMessage.ChannelMessage", b =>
                {
                    b.HasOne("Channel.Channel", "Channel")
                        .WithMany("ChannelMessages")
                        .HasForeignKey("ChannelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Message.Message", "Message")
                        .WithMany("ChannelMessages")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("GroupAccountMessage.GroupAccountMessage", b =>
                {
                    b.HasOne("Account.Account", "Account")
                        .WithMany("GroupAccountMessages")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Group.Group", "Group")
                        .WithMany("GroupAccountMessages")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Message.Message", "Message")
                        .WithMany("GroupAccountMessages")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Group");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("GroupMessage.GroupMessage", b =>
                {
                    b.HasOne("Group.Group", "Group")
                        .WithMany("GroupMessages")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Message.Message", "Message")
                        .WithMany("GroupMessages")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Message.Message", b =>
                {
                    b.HasOne("Channel.Channel", null)
                        .WithMany("messages")
                        .HasForeignKey("ChannelID");

                    b.HasOne("Group.Group", null)
                        .WithMany("Messages")
                        .HasForeignKey("GroupID");
                });

            modelBuilder.Entity("PV.PV", b =>
                {
                    b.HasOne("Account.Account", null)
                        .WithMany("Pvs")
                        .HasForeignKey("AccountID");
                });

            modelBuilder.Entity("PVAccountMessage.PVAccountMessage", b =>
                {
                    b.HasOne("Account.Account", "Account")
                        .WithMany("PvAccountMessages")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Message.Message", "Message")
                        .WithMany("PvAccountMessages")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PV.PV", "PV")
                        .WithMany("PvAccountMessages")
                        .HasForeignKey("PVID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Message");

                    b.Navigation("PV");
                });

            modelBuilder.Entity("messenger.PVMessage.PVMessage", b =>
                {
                    b.HasOne("Message.Message", "Message")
                        .WithMany("PvMessages")
                        .HasForeignKey("MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PV.PV", "PV")
                        .WithMany("PvMessages")
                        .HasForeignKey("PVID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("PV");
                });

            modelBuilder.Entity("Account.Account", b =>
                {
                    b.Navigation("AccountChannels");

                    b.Navigation("AccountGroups");

                    b.Navigation("AccountPvs");

                    b.Navigation("ChannelAccountMessages");

                    b.Navigation("ContactedBy");

                    b.Navigation("Contacts");

                    b.Navigation("GroupAccountMessages");

                    b.Navigation("PvAccountMessages");

                    b.Navigation("Pvs");
                });

            modelBuilder.Entity("Channel.Channel", b =>
                {
                    b.Navigation("AccountChannels");

                    b.Navigation("ChannelAccountMessages");

                    b.Navigation("ChannelMessages");

                    b.Navigation("messages");
                });

            modelBuilder.Entity("Group.Group", b =>
                {
                    b.Navigation("AccountGroups");

                    b.Navigation("GroupAccountMessages");

                    b.Navigation("GroupMessages");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Message.Message", b =>
                {
                    b.Navigation("ChannelAccountMessages");

                    b.Navigation("ChannelMessages");

                    b.Navigation("GroupAccountMessages");

                    b.Navigation("GroupMessages");

                    b.Navigation("PvAccountMessages");

                    b.Navigation("PvMessages");
                });

            modelBuilder.Entity("PV.PV", b =>
                {
                    b.Navigation("AccountPvs");

                    b.Navigation("PvAccountMessages");

                    b.Navigation("PvMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
